# Macro file for the initialization of example B1
# in interactive session
#
# Set some default verbose
/control/verbose 2
/control/saveHistory
/run/verbose 2
#
# Change the default number of threads (in multi-threaded mode)
#/run/numberOfThreads 4
#
# Initialize kernel
/run/initialize
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
/vis/open VRML2FILE

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
/vis/viewer/set/viewpointVector -1 0 0
/vis/viewer/set/lightsVector -1 0 0

# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100

# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2

# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate

# Axes, scale, etc.
/vis/scene/add/scale   # Simple scale line
/vis/scene/add/axes    0 0 0 40 mm # Simple axes: x=red, y=green, z=blue.
#/vis/scene/add/eventID # Drawn at end of event
#/vis/scene/add/date    # Date stamp
#/vis/scene/add/logo2D  # Simple logo
#/vis/scene/add/logo    # 3D logo
#
# Frame
#/vis/set/colour red
#/vis/set/lineWidth 2
#/vis/scene/add/frame   # Simple frame around the view
#/vis/set/colour        # Revert to default colour (white)
#/vis/set/lineWidth     # Revert to default line width (1.)
#
# Attach text to one edge of Shape1, with a small, fixed offset
/vis/scene/add/text 0 0 5 cm 10 2 2 z
/vis/scene/add/text 0 5 0 cm 10 2 2 y
# Attach text to one corner of Shape2, with a small, fixed offset
/vis/scene/add/text 6 7 10 cm 18 4 4 Shape2

# To get nice view
/vis/geometry/set/visibility World 0 false
#/vis/geometry/set/visibility Envelope 0 false
#/vis/viewer/set/style surface
#/vis/viewer/set/hiddenMarker true
#/vis/viewer/set/viewpointThetaPhi 120 150
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
/vis/viewer/flush













###################################################
#  vis1.mac:
#    A Sample macro to demonstrate visualization 
#    of detector geometry.
#
#  USAGE: 
#   Save the commands below as a macro file, say, 
#   "vis1.mac", and execute it as follows:
#
#   % $(G4BINDIR)/exampleN03
#   Idle> /control/execute vis1.mac
#############################################

#############################################
# Visualization of detector geometry 
#  with the OGLIX (OpenGL Immediate X) driver
#############################################

# Invoke the OGLIX driver: 
#  Create a scene handler and a viewer for the OGLIX driver
#/vis/open OGLIX

#/run/initialize

# Visualize the whole detector geometry 
#  with the default camera parameters.
#  Command "/vis/drawVolume" visualizes the detector geometry,
#  and command "/vis/viewer/flush" declares the end of visualization.
#  (The command /vis/viewer/flush  can be omitted for the OGLIX 
#   and OGLSX drivers.)
#  The default argument of "/vis/drawVolume" is "world".
#/vis/drawVolume
#/vis/viewer/flush
